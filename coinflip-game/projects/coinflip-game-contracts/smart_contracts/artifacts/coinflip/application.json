{
    "hints": {
        "hello(string)string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "start_game(pay,string)string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "join_game(pay)string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "resolve(account)string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "check_wins()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDgKaW50Y2Jsb2NrIDAgMQpieXRlY2Jsb2NrIDB4IDB4NzA2YzYxNzk2NTcyNWY2MTVmNjE2MzYzNmY3NTZlNzQgMHg0NTZkNzA3NDc5IDB4NzA2YzYxNzk2NTcyNWY2MTVmNjM2ODZmNjk2MzY1IDB4Nzc2MTY3NjU3MiAweDE1MWY3Yzc1IDB4NzA2YzYxNzk2NTcyNWY2MjVmNjE2MzYzNmY3NTZlNzQgMHg0ZTZmNzQyMDYzNjg2ZjczNjU2ZTIwNzk2NTc0IDB4NzA2YzYxNzk2NTcyNWY2NzYxNmQ2NTczNWY3NzZmNmUgMHg3MDZjNjE3OTY1NzI1ZjYyNWY2MzY4NmY2OTYzNjUgMHg1NDYxNjk2YzczIDB4NDg2NTYxNjQ3Mwp0eG4gTnVtQXBwQXJncwppbnRjXzAgLy8gMAo9PQpibnogbWFpbl9sMTIKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHgwMmJlY2UxMSAvLyAiaGVsbG8oc3RyaW5nKXN0cmluZyIKPT0KYm56IG1haW5fbDExCnR4bmEgQXBwbGljYXRpb25BcmdzIDAKcHVzaGJ5dGVzIDB4Mjk4ODkxM2YgLy8gInN0YXJ0X2dhbWUocGF5LHN0cmluZylzdHJpbmciCj09CmJueiBtYWluX2wxMAp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCnB1c2hieXRlcyAweGM2MjdjNDJjIC8vICJqb2luX2dhbWUocGF5KXN0cmluZyIKPT0KYm56IG1haW5fbDkKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHgwZTMzZmZiYyAvLyAicmVzb2x2ZShhY2NvdW50KXN0cmluZyIKPT0KYm56IG1haW5fbDgKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHg1ODU0Y2FjNiAvLyAiY2hlY2tfd2lucygpdWludDY0Igo9PQpibnogbWFpbl9sNwplcnIKbWFpbl9sNzoKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQomJgphc3NlcnQKY2FsbHN1YiBjaGVja3dpbnNjYXN0ZXJfMTQKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDg6CnR4biBPbkNvbXBsZXRpb24KaW50Y18wIC8vIE5vT3AKPT0KdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKIT0KJiYKYXNzZXJ0CmNhbGxzdWIgcmVzb2x2ZWNhc3Rlcl8xMwppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sOToKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQomJgphc3NlcnQKY2FsbHN1YiBqb2luZ2FtZWNhc3Rlcl8xMgppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sMTA6CnR4biBPbkNvbXBsZXRpb24KaW50Y18wIC8vIE5vT3AKPT0KdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKIT0KJiYKYXNzZXJ0CmNhbGxzdWIgc3RhcnRnYW1lY2FzdGVyXzExCmludGNfMSAvLyAxCnJldHVybgptYWluX2wxMToKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQomJgphc3NlcnQKY2FsbHN1YiBoZWxsb2Nhc3Rlcl8xMAppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sMTI6CnR4biBPbkNvbXBsZXRpb24KaW50Y18wIC8vIE5vT3AKPT0KYm56IG1haW5fbDE2CnR4biBPbkNvbXBsZXRpb24KaW50Y18xIC8vIE9wdEluCj09CmJueiBtYWluX2wxNQplcnIKbWFpbl9sMTU6CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CmFzc2VydApjYWxsc3ViIG9wdGluXzIKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDE2Ogp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAo9PQphc3NlcnQKY2FsbHN1YiBjcmVhdGVfMQppbnRjXzEgLy8gMQpyZXR1cm4KCi8vIGhlbGxvCmhlbGxvXzA6CnByb3RvIDEgMQpieXRlY18wIC8vICIiCnB1c2hieXRlcyAweDQ4NjU2YzZjNmYyYzIwIC8vICJIZWxsbywgIgpmcmFtZV9kaWcgLTEKZXh0cmFjdCAyIDAKY29uY2F0CmZyYW1lX2J1cnkgMApmcmFtZV9kaWcgMApsZW4KaXRvYgpleHRyYWN0IDYgMApmcmFtZV9kaWcgMApjb25jYXQKZnJhbWVfYnVyeSAwCnJldHN1YgoKLy8gY3JlYXRlCmNyZWF0ZV8xOgpwcm90byAwIDAKYnl0ZWNfMSAvLyAicGxheWVyX2FfYWNjb3VudCIKYnl0ZWNfMiAvLyAiRW1wdHkiCmFwcF9nbG9iYWxfcHV0CmJ5dGVjXzMgLy8gInBsYXllcl9hX2Nob2ljZSIKYnl0ZWMgNyAvLyAiTm90IGNob3NlbiB5ZXQiCmFwcF9nbG9iYWxfcHV0CmJ5dGVjIDYgLy8gInBsYXllcl9iX2FjY291bnQiCmJ5dGVjXzIgLy8gIkVtcHR5IgphcHBfZ2xvYmFsX3B1dApieXRlYyA5IC8vICJwbGF5ZXJfYl9jaG9pY2UiCmJ5dGVjIDcgLy8gIk5vdCBjaG9zZW4geWV0IgphcHBfZ2xvYmFsX3B1dApieXRlYyA0IC8vICJ3YWdlciIKaW50Y18wIC8vIDAKYXBwX2dsb2JhbF9wdXQKcmV0c3ViCgovLyBvcHRfaW4Kb3B0aW5fMjoKcHJvdG8gMCAwCnR4biBTZW5kZXIKYnl0ZWMgOCAvLyAicGxheWVyX2dhbWVzX3dvbiIKaW50Y18wIC8vIDAKYXBwX2xvY2FsX3B1dApyZXRzdWIKCi8vIHN0YXJ0X2dhbWUKc3RhcnRnYW1lXzM6CnByb3RvIDIgMQpieXRlY18wIC8vICIiCnR4biBTZW5kZXIKZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbklECmFwcF9vcHRlZF9pbgovLyB1bmF1dGhvcml6ZWQKYXNzZXJ0CmludGNfMSAvLyBwYXkKaW50Y18xIC8vIHBheQo9PQpieXRlYyA0IC8vICJ3YWdlciIKYXBwX2dsb2JhbF9nZXQKaW50Y18wIC8vIDAKPT0KJiYKZnJhbWVfZGlnIC0yCmd0eG5zIFJlY2VpdmVyCmdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCj09CiYmCmJ5dGVjXzEgLy8gInBsYXllcl9hX2FjY291bnQiCmFwcF9nbG9iYWxfZ2V0CmJ5dGVjXzIgLy8gIkVtcHR5Igo9PQomJgpieXRlY18zIC8vICJwbGF5ZXJfYV9jaG9pY2UiCmFwcF9nbG9iYWxfZ2V0CmJ5dGVjIDcgLy8gIk5vdCBjaG9zZW4geWV0Igo9PQomJgphc3NlcnQKYnl0ZWNfMSAvLyAicGxheWVyX2FfYWNjb3VudCIKdHhuIFNlbmRlcgphcHBfZ2xvYmFsX3B1dApieXRlY18zIC8vICJwbGF5ZXJfYV9jaG9pY2UiCmZyYW1lX2RpZyAtMQpleHRyYWN0IDIgMAphcHBfZ2xvYmFsX3B1dApieXRlYyA0IC8vICJ3YWdlciIKZnJhbWVfZGlnIC0yCmd0eG5zIEFtb3VudAphcHBfZ2xvYmFsX3B1dApwdXNoYnl0ZXMgMHg1Mzc1NjM2MzY1NzM3MzY2NzU2YzZjMmUgLy8gIlN1Y2Nlc3NmdWxsLiIKZnJhbWVfYnVyeSAwCmZyYW1lX2RpZyAwCmxlbgppdG9iCmV4dHJhY3QgNiAwCmZyYW1lX2RpZyAwCmNvbmNhdApmcmFtZV9idXJ5IDAKcmV0c3ViCgovLyBqb2luX2dhbWUKam9pbmdhbWVfNDoKcHJvdG8gMSAxCmJ5dGVjXzAgLy8gIiIKdHhuIFNlbmRlcgpnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uSUQKYXBwX29wdGVkX2luCi8vIHVuYXV0aG9yaXplZAphc3NlcnQKaW50Y18xIC8vIHBheQppbnRjXzEgLy8gcGF5Cj09CmJ5dGVjXzEgLy8gInBsYXllcl9hX2FjY291bnQiCmFwcF9nbG9iYWxfZ2V0CmJ5dGVjXzIgLy8gIkVtcHR5IgohPQomJgpieXRlYyA2IC8vICJwbGF5ZXJfYl9hY2NvdW50IgphcHBfZ2xvYmFsX2dldApieXRlY18yIC8vICJFbXB0eSIKPT0KJiYKYnl0ZWNfMSAvLyAicGxheWVyX2FfYWNjb3VudCIKYXBwX2dsb2JhbF9nZXQKdHhuIFNlbmRlcgohPQomJgpmcmFtZV9kaWcgLTEKZ3R4bnMgUmVjZWl2ZXIKZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKPT0KJiYKYnl0ZWMgNCAvLyAid2FnZXIiCmFwcF9nbG9iYWxfZ2V0CmZyYW1lX2RpZyAtMQpndHhucyBBbW91bnQKPT0KJiYKYXNzZXJ0CmJ5dGVjIDYgLy8gInBsYXllcl9iX2FjY291bnQiCnR4biBTZW5kZXIKYXBwX2dsb2JhbF9wdXQKYnl0ZWMgOSAvLyAicGxheWVyX2JfY2hvaWNlIgpieXRlY18zIC8vICJwbGF5ZXJfYV9jaG9pY2UiCmFwcF9nbG9iYWxfZ2V0CmNhbGxzdWIgbGVmdG92ZXJzaWRlXzkKYXBwX2dsb2JhbF9wdXQKcHVzaGJ5dGVzIDB4MzIzMDMwMmUgLy8gIjIwMC4iCmZyYW1lX2J1cnkgMApmcmFtZV9kaWcgMApsZW4KaXRvYgpleHRyYWN0IDYgMApmcmFtZV9kaWcgMApjb25jYXQKZnJhbWVfYnVyeSAwCnJldHN1YgoKLy8gcmVzb2x2ZQpyZXNvbHZlXzU6CnByb3RvIDEgMQpieXRlY18wIC8vICIiCnR4biBTZW5kZXIKZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbklECmFwcF9vcHRlZF9pbgovLyB1bmF1dGhvcml6ZWQKYXNzZXJ0CmJ5dGVjXzEgLy8gInBsYXllcl9hX2FjY291bnQiCmFwcF9nbG9iYWxfZ2V0CnN0b3JlIDAKZnJhbWVfZGlnIC0xCnR4bmFzIEFjY291bnRzCnN0b3JlIDEKbG9hZCAwCnR4biBTZW5kZXIKPT0KYnl0ZWMgNiAvLyAicGxheWVyX2JfYWNjb3VudCIKYXBwX2dsb2JhbF9nZXQKYnl0ZWNfMiAvLyAiRW1wdHkiCiE9CiYmCmFzc2VydApjYWxsc3ViIGRlY2lkZXdpbm5lcl83CnN0b3JlIDIKYnl0ZWMgNCAvLyAid2FnZXIiCmFwcF9nbG9iYWxfZ2V0CmxvYWQgMgpjYWxsc3ViIHBheW91dF84CmxvYWQgMgp0eG5hcyBBY2NvdW50cwpieXRlYyA4IC8vICJwbGF5ZXJfZ2FtZXNfd29uIgppbnRjXzEgLy8gMQphcHBfbG9jYWxfcHV0CnJldHN1YgoKLy8gY2hlY2tfd2lucwpjaGVja3dpbnNfNjoKcHJvdG8gMCAxCmludGNfMCAvLyAwCnR4biBTZW5kZXIKZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbklECmFwcF9vcHRlZF9pbgovLyB1bmF1dGhvcml6ZWQKYXNzZXJ0CnR4biBTZW5kZXIKYnl0ZWMgOCAvLyAicGxheWVyX2dhbWVzX3dvbiIKYXBwX2xvY2FsX2dldApmcmFtZV9idXJ5IDAKcmV0c3ViCgovLyBkZWNpZGVfd2lubmVyCmRlY2lkZXdpbm5lcl83Ogpwcm90byAwIDEKYnl0ZWNfMyAvLyAicGxheWVyX2FfY2hvaWNlIgphcHBfZ2xvYmFsX2dldApieXRlYyAxMCAvLyAiVGFpbHMiCj09CmJueiBkZWNpZGV3aW5uZXJfN19sMgppbnRjXzEgLy8gMQpiIGRlY2lkZXdpbm5lcl83X2wzCmRlY2lkZXdpbm5lcl83X2wyOgppbnRjXzAgLy8gMApkZWNpZGV3aW5uZXJfN19sMzoKcmV0c3ViCgovLyBwYXlvdXQKcGF5b3V0Xzg6CnByb3RvIDIgMAppdHhuX2JlZ2luCmludGNfMSAvLyBwYXkKaXR4bl9maWVsZCBUeXBlRW51bQpmcmFtZV9kaWcgLTIKcHVzaGludCAyIC8vIDIKKgp0eG4gRmVlCi0KaXR4bl9maWVsZCBBbW91bnQKZnJhbWVfZGlnIC0xCnR4bmFzIEFjY291bnRzCml0eG5fZmllbGQgUmVjZWl2ZXIKaXR4bl9zdWJtaXQKcmV0c3ViCgovLyBsZWZ0b3Zlcl9zaWRlCmxlZnRvdmVyc2lkZV85Ogpwcm90byAxIDEKZnJhbWVfZGlnIC0xCmJ5dGVjIDExIC8vICJIZWFkcyIKPT0KYm56IGxlZnRvdmVyc2lkZV85X2wyCmJ5dGVjIDExIC8vICJIZWFkcyIKYiBsZWZ0b3ZlcnNpZGVfOV9sMwpsZWZ0b3ZlcnNpZGVfOV9sMjoKYnl0ZWMgMTAgLy8gIlRhaWxzIgpsZWZ0b3ZlcnNpZGVfOV9sMzoKcmV0c3ViCgovLyBoZWxsb19jYXN0ZXIKaGVsbG9jYXN0ZXJfMTA6CnByb3RvIDAgMApieXRlY18wIC8vICIiCmR1cAp0eG5hIEFwcGxpY2F0aW9uQXJncyAxCmZyYW1lX2J1cnkgMQpmcmFtZV9kaWcgMQpjYWxsc3ViIGhlbGxvXzAKZnJhbWVfYnVyeSAwCmJ5dGVjIDUgLy8gMHgxNTFmN2M3NQpmcmFtZV9kaWcgMApjb25jYXQKbG9nCnJldHN1YgoKLy8gc3RhcnRfZ2FtZV9jYXN0ZXIKc3RhcnRnYW1lY2FzdGVyXzExOgpwcm90byAwIDAKYnl0ZWNfMCAvLyAiIgppbnRjXzAgLy8gMApieXRlY18wIC8vICIiCnR4bmEgQXBwbGljYXRpb25BcmdzIDEKZnJhbWVfYnVyeSAyCnR4biBHcm91cEluZGV4CmludGNfMSAvLyAxCi0KZnJhbWVfYnVyeSAxCmZyYW1lX2RpZyAxCmd0eG5zIFR5cGVFbnVtCmludGNfMSAvLyBwYXkKPT0KYXNzZXJ0CmZyYW1lX2RpZyAxCmZyYW1lX2RpZyAyCmNhbGxzdWIgc3RhcnRnYW1lXzMKZnJhbWVfYnVyeSAwCmJ5dGVjIDUgLy8gMHgxNTFmN2M3NQpmcmFtZV9kaWcgMApjb25jYXQKbG9nCnJldHN1YgoKLy8gam9pbl9nYW1lX2Nhc3Rlcgpqb2luZ2FtZWNhc3Rlcl8xMjoKcHJvdG8gMCAwCmJ5dGVjXzAgLy8gIiIKaW50Y18wIC8vIDAKdHhuIEdyb3VwSW5kZXgKaW50Y18xIC8vIDEKLQpmcmFtZV9idXJ5IDEKZnJhbWVfZGlnIDEKZ3R4bnMgVHlwZUVudW0KaW50Y18xIC8vIHBheQo9PQphc3NlcnQKZnJhbWVfZGlnIDEKY2FsbHN1YiBqb2luZ2FtZV80CmZyYW1lX2J1cnkgMApieXRlYyA1IC8vIDB4MTUxZjdjNzUKZnJhbWVfZGlnIDAKY29uY2F0CmxvZwpyZXRzdWIKCi8vIHJlc29sdmVfY2FzdGVyCnJlc29sdmVjYXN0ZXJfMTM6CnByb3RvIDAgMApieXRlY18wIC8vICIiCmludGNfMCAvLyAwCnR4bmEgQXBwbGljYXRpb25BcmdzIDEKaW50Y18wIC8vIDAKZ2V0Ynl0ZQpmcmFtZV9idXJ5IDEKZnJhbWVfZGlnIDEKY2FsbHN1YiByZXNvbHZlXzUKZnJhbWVfYnVyeSAwCmJ5dGVjIDUgLy8gMHgxNTFmN2M3NQpmcmFtZV9kaWcgMApjb25jYXQKbG9nCnJldHN1YgoKLy8gY2hlY2tfd2luc19jYXN0ZXIKY2hlY2t3aW5zY2FzdGVyXzE0Ogpwcm90byAwIDAKaW50Y18wIC8vIDAKY2FsbHN1YiBjaGVja3dpbnNfNgpmcmFtZV9idXJ5IDAKYnl0ZWMgNSAvLyAweDE1MWY3Yzc1CmZyYW1lX2RpZyAwCml0b2IKY29uY2F0CmxvZwpyZXRzdWI=",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"
    },
    "state": {
        "global": {
            "num_byte_slices": 4,
            "num_uints": 1
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 1
        }
    },
    "schema": {
        "global": {
            "declared": {
                "player_a_account": {
                    "type": "bytes",
                    "key": "player_a_account",
                    "descr": "First player's account"
                },
                "player_a_choice": {
                    "type": "bytes",
                    "key": "player_a_choice",
                    "descr": "First player's side of the coin"
                },
                "player_b_account": {
                    "type": "bytes",
                    "key": "player_b_account",
                    "descr": "Second player's account"
                },
                "player_b_choice": {
                    "type": "bytes",
                    "key": "player_b_choice",
                    "descr": "Second player's side of the coin"
                },
                "wager": {
                    "type": "uint64",
                    "key": "wager",
                    "descr": "Betting amount for the coinflip"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {
                "player_games_won": {
                    "type": "uint64",
                    "key": "player_games_won",
                    "descr": "Amount of coinflip games won"
                }
            },
            "reserved": {}
        }
    },
    "contract": {
        "name": "coinflip",
        "methods": [
            {
                "name": "hello",
                "args": [
                    {
                        "type": "string",
                        "name": "name"
                    }
                ],
                "returns": {
                    "type": "string"
                }
            },
            {
                "name": "start_game",
                "args": [
                    {
                        "type": "pay",
                        "name": "payment"
                    },
                    {
                        "type": "string",
                        "name": "choice"
                    }
                ],
                "returns": {
                    "type": "string"
                },
                "desc": "Player A initiates the game, he pays the wager he wants for the game and then chooses the side of the coin (\"Heads\" or \"Tails\")"
            },
            {
                "name": "join_game",
                "args": [
                    {
                        "type": "pay",
                        "name": "payment"
                    }
                ],
                "returns": {
                    "type": "string"
                },
                "desc": "Player B joins the game, gets the side that's left (player A picks first), pays the wager and waits for the game to resolve by player A"
            },
            {
                "name": "resolve",
                "args": [
                    {
                        "type": "account",
                        "name": "opp"
                    }
                ],
                "returns": {
                    "type": "string"
                },
                "desc": "Player A resolves the game, win counter updates and the wager pays out to the player who won"
            },
            {
                "name": "check_wins",
                "args": [],
                "returns": {
                    "type": "uint64"
                },
                "desc": "Check personal number of coinflip wins"
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE",
        "opt_in": "CALL"
    }
}